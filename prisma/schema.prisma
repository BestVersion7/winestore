generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model commenttb {
  comment_id        Int       @id @default(autoincrement())
  comment_date      DateTime? @default(now()) @db.Timestamp(6)
  comment_user_name String?   @db.VarChar(100)
  comment_body      String?   @db.VarChar(250)
  drink_id          Int?
  drinkdb           drinkdb?  @relation(fields: [drink_id], references: [drink_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_1")
}

model drinkdb {
  drink_id          Int         @id @default(autoincrement())
  drink_name        String?     @db.VarChar(50)
  drink_group       String?     @default("margaritas") @db.VarChar(30)
  drink_url         String?     @db.VarChar(500)
  drink_ingredients String?
  drink_directions  String?
  drink_price       Int?        @default(20)
  commenttb         commenttb[]
}

model ordertb {
  orderid   Int     @id @default(autoincrement())
  productid Int     @unique
  quantity  Int?    @db.SmallInt
  storedb   storedb @relation(fields: [productid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model storedb {
  id         Int      @id @default(autoincrement())
  pname      String?  @db.VarChar(50)
  price      String?  @db.VarChar(4)
  pictureurl String?  @db.VarChar(500)
  ordertb    ordertb?
}

model usertb {
  account_id Int      @id @default(autoincrement())
  last_name  String?  @db.VarChar(10)
  gender     String?  @db.VarChar(1)
  lastmod    DateTime @default(now()) @db.Timestamptz(6)
  first_name String?
}

model blog {
  article_id          Int       @id @default(autoincrement())
  article_date        DateTime? @default(now()) @db.Date
  article_image_small String?   @db.VarChar(300)
  article_image       String?   @db.VarChar(300)
  article_title       String?   @db.VarChar(100)
  article_post        String?
  article_public      Boolean?
  comment             comment[]
}

model comment {
  comment_id         Int       @id @default(autoincrement())
  comment_date       DateTime? @default(now()) @db.Timestamp(6)
  comment_user_name  String?   @db.VarChar(100)
  comment_body       String?   @db.VarChar(500)
  comment_user_image String?   @db.VarChar(150)
  article_id         Int?
  blog               blog?     @relation(fields: [article_id], references: [article_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_1")
}

model reel {
  reel_id              Int       @id @default(autoincrement())
  reel_date            DateTime? @default(now()) @db.Timestamp(6)
  reel_image           String?   @db.VarChar(300)
  reel_category        String?   @default("Outdoor") @db.VarChar(80)
  reel_public          Boolean?
  reel_video           Boolean?
  reel_video_thumbnail String?   @db.VarChar(150)
}
